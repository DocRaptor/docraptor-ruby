#!/bin/bash
set -e
[[ "$TRACE" == "true" ]] && set -x
cd "$(dirname "$0")/.."

OPTIND=1

image=""

while getopts "h?i:" opt; do
  case "$opt" in
    h|\?)
      show_help
      exit 0
      ;;
    i)  image="$OPTARG"
      ;;
  esac
done

shift $((OPTIND-1))

if [[ "$image" == "" ]]; then
  image="$(cat .runtime-environments | grep -v '^#' | tail -n 1)"
  echo "docker image (-i) unset, defaulting to: $image"
fi

if ! docker pull "$image"; then
  echo "Pulling the latest version of ${image} failed, but we'll continue in"
  echo "the hopes that there's a previous version of the container available."
  echo "This probably isn't an issue unless you really want to verify"
  echo "everything works with a :latest container image."
fi

command="$1"

mounts=()
while IFS=':' read -r source target; do
  # Create the directory if it's not a special/magic path (like for ssh)
  mkdir -p -m 700 "$source" &> /dev/null || true

  mounts+=(--volume)
  mounts+=("${source}:${target}")

  # Can't pipe to the while loop because that causes a subshell, which means
  # the variables set in the loop aren't available outside of it.
done < <(eval echo "\"$(grep -v '^#' .docker_mounts.list)\"")

set -x
docker run -it --rm \
  --env-file .docker_env.list \
  --env RUNTIME_ENV="${image}" \
  --mount type=bind,source="$(pwd)",target=/app \
  "${mounts[@]}" \
  "$image" \
  "$command"
